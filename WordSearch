Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m=len(board)
        n=len(board[0]) 
        def fun(i,j,idx):
            if i<0 or j<0 or i==m or j==n:
                return False
            if board[i][j]=='*' or board[i][j]!=word[idx]:
                return False
            if idx==len(word)-1:
                return True
            a=board[i][j]
            board[i][j]='*'
            res=fun(i+1,j,idx+1) or fun(i-1,j,idx+1) or fun(i,j+1,idx+1) or fun(i,j-1,idx+1)
            board[i][j]=a
            return res
        for i in range(m):
            for j in range(n):
                if fun(i,j,0):
                    return True
        return False

        
