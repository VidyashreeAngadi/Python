Given the head of a linked list, return the list after sorting it in ascending order.
Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:
Input: head = []
Output: []

class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def merge(l1,l2):
            dummy=ListNode(0)
            cur=dummy
            while l1 and l2:
                if l1.val<l2.val:
                    cur.next=l1
                    l1=l1.next
                    # cur=cur.next
                else:
                    cur.next=l2
                    l2=l2.next
                cur=cur.next
            cur.next=l1 if l1 else l2
            return dummy.next
        if head==None or head.next==None:
            return head
        slow=head
        fast=head.next
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next      
        mid=slow.next
        slow.next=None
        left=self.sortList(head)
        right=self.sortList(mid)
        return merge(left,right)
