Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.
Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.

class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge(l,s,m,e):
            l1=l[s:m+1]
            l2=l[m+1:e+1]
            i=0
            j=0
            k=s
            while i<len(l1) and j<len(l2):
                if l1[i]<l2[j]:
                    l[k]=l1[i]
                    i+=1
                    k+=1
                else:
                    l[k]=l2[j]
                    j+=1
                    k+=1
            while i<len(l1):
                l[k]=l1[i]
                i+=1
                k+=1
            while j<len(l2):
                l[k]=l2[j]
                j+=1
                k+=1
        def merge_sort(l,s,e):
            if s<e:
                m=(s+e)//2
                merge_sort(l,s,m)
                merge_sort(l,m+1,e)
                merge(l,s,m,e)
        merge_sort(nums,0,len(nums)-1)
        return nums



