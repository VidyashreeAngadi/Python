You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.
Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:
Input: lists = []
Output: []
Example 3:
Input: lists = [[]]
Output: []

class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        def merge(l1,l2):
            dummy=ListNode(0)
            cur=dummy
            while l1 and l2:
                if l1.val<l2.val:
                    cur.next=l1
                    l1=l1.next
                    # cur=cur.next
                else:
                    cur.next=l2
                    l2=l2.next
                cur=cur.next
            cur.next=l1 if l1 else l2
            return dummy.next
        def divide(lists,si,li):
            if si==li:
                return lists[si]
            mid=(si+li)//2
            left=divide(lists,si,mid)
            right=divide(lists,mid+1,li)
            return merge(left,right)
        if not lists:
            return None
        return divide(lists,0,len(lists)-1)
